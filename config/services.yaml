# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    meteomatics_baseurl: 'https://api.meteomatics.com'
    meteomatics_time: 'now'
    meteomatics_apiparameter: 't_2m:C'
    meteomatics_format: 'json'
    meteomatics_login: '%env(METEOMATICS_LOGIN)%'
    meteomatics_password: '%env(METEOMATICS_PASSWORD)%'

    openweather_baseurl: 'https://api.openweathermap.org/data/2.5/weather'
    openweather_basegeourl: 'http://api.openweathermap.org/geo/1.0/direct'
    openweather_api_key: '%env(OPENWEATHER_API_KEY)%'
    openweather_units: 'metric'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
    
 
    App\Communication\Api\WeatherApiRepository:
       lazy: true
       arguments:
            $weatherApiConfig:
                meteomatics: '@App\Communication\Api\Meteomatics'
                openweather: '@App\Communication\Api\OpenWeather'
            $openWeatherGeo: '@App\Communication\Api\OpenWeatherGeo'
  
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
